// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/watch_processes.go
//
// Generated by this command:
//
//	mockgen -source=cmd/watch_processes.go
//

// Package mock_cmd is a generated GoMock package.
package cmd

import (
	exec "os/exec"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessManager is a mock of ProcessManager interface.
type MockProcessManager struct {
	ctrl     *gomock.Controller
	recorder *MockProcessManagerMockRecorder
}

// MockProcessManagerMockRecorder is the mock recorder for MockProcessManager.
type MockProcessManagerMockRecorder struct {
	mock *MockProcessManager
}

// NewMockProcessManager creates a new mock instance.
func NewMockProcessManager(ctrl *gomock.Controller) *MockProcessManager {
	mock := &MockProcessManager{ctrl: ctrl}
	mock.recorder = &MockProcessManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessManager) EXPECT() *MockProcessManagerMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockProcessManager) Kill(cmd *exec.Cmd) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill", cmd)
}

// Kill indicates an expected call of Kill.
func (mr *MockProcessManagerMockRecorder) Kill(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockProcessManager)(nil).Kill), cmd)
}
