// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/wrapped_process.go
//
// Generated by this command:
//
//	mockgen -source=cmd/wrapped_process.go
//

package cmd

import (
	exec "os/exec"
	reflect "reflect"

	cmd "github.com/aaronlifton/nvim-watcher/cmd"
	gomock "go.uber.org/mock/gomock"
)

// MockWrappedProcessManager is a mock of WrappedProcessManager interface.
type MockWrappedProcessManager struct {
	ctrl     *gomock.Controller
	recorder *MockWrappedProcessManagerMockRecorder
}

// MockWrappedProcessManagerMockRecorder is the mock recorder for MockWrappedProcessManager.
type MockWrappedProcessManagerMockRecorder struct {
	mock *MockWrappedProcessManager
}

// NewMockWrappedProcessManager creates a new mock instance.
func NewMockWrappedProcessManager(ctrl *gomock.Controller) *MockWrappedProcessManager {
	mock := &MockWrappedProcessManager{ctrl: ctrl}
	mock.recorder = &MockWrappedProcessManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWrappedProcessManager) EXPECT() *MockWrappedProcessManagerMockRecorder {
	return m.recorder
}

// GetStats mocks base method.
func (m *MockWrappedProcessManager) GetStats() (cmd.ProcessData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(cmd.ProcessData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockWrappedProcessManagerMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockWrappedProcessManager)(nil).GetStats))
}

// Kill mocks base method.
func (m *MockWrappedProcessManager) Kill(cmd *exec.Cmd) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill", cmd)
}

// Kill indicates an expected call of Kill.
func (mr *MockWrappedProcessManagerMockRecorder) Kill(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockWrappedProcessManager)(nil).Kill), cmd)
}

// 	ctrl := gomock.NewController(t)
// 	m := NewMockWrappedProcessManager(ctrl)
// 	m.EXPECT().
//
// }
